This command runs my local server for testing the APIs with http request
poetry run python -m uvicorn src.main:app --reload --log-level info

This command runs my local server for testing the APIs with and https request
poetry run python -m uvicorn src.main:app --reload --log-level info --host 127.0.0.1 --port 8000 --ssl-keyfile=key.pem --ssl-certfile=cert.pem

These commands create permision keys that allow fastAPI to use https requests over an http requests. It is necessary for an instagram webhook
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes


for ngrok:
Authtoken saved to configuration file: C:\Users\Ethan Lavis\AppData\Local/ngrok/ngrok.yml
```ngrok http 8000``` creates a tunnel for the local API
ngrok http --url=useful-chamois-flowing.ngrok-free.app 8000


For instagram:
PlainTextRespose is important since fastAPI naturally serializes response as a JSON fromatt --> this is only needed for the initial set up. It can be commented out later
@app.get('/comment')
def root(request: Request):
    hub_mode = request.query_params.get('hub.mode')
    hub_challenge = request.query_params.get('hub.challenge')
    hub_verify_token = request.query_params.get('hub.verify_token')

    logging.info("We made it to the comment")

    logging.info(f"Hub Mode: {hub_mode}")
    logging.info(f"Hub Challenge: {hub_challenge}")
    logging.info(f"Hub Verify Token: {hub_verify_token}")

    if hub_verify_token == "12345" and hub_mode == "subscribe":
        logging.info("Verfied")
        logging.info(f"{hub_challenge} is of type {type(hub_challenge)}")
        return PlainTextResponse(content=hub_challenge)  # Echo the hub.challenge value
    else:
        return {"status": "Verification failed"}, 403